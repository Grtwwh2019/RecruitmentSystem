<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zzj.recruitment.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.zzj.recruitment.pojo.User" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="headerMask" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="nickName" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="telephone" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="email" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="userName" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="passWord" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="license" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="companyId" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="empNo" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="cardPhoto" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="enterpriseMail" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="authentication" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="createTime" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="updateTime" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, headerMask, nickName, telephone, email, userName, passWord, license, companyId, empNo,
    cardPhoto, enterpriseMail,authentication, createTime, updateTime
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zzj.recruitment.pojo.User" >
    insert into user (id, headerMask, nickName, telephone,
      email, userName,
      passWord, license, companyId, 
      empNo, cardPhoto, enterpriseMail, 
      createTime, updateTime)
    values (#{id,jdbcType=INTEGER}, #{nickname,jdbcType=VARCHAR}, #{telephone,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR},
      #{password,jdbcType=VARCHAR}, #{license,jdbcType=VARCHAR}, #{companyid,jdbcType=INTEGER},
      #{empno,jdbcType=INTEGER}, #{cardphoto,jdbcType=VARCHAR}, #{enterprisemail,jdbcType=VARCHAR}, 
      now(), now())
  </insert>
  <insert id="insertSelective" parameterType="com.zzj.recruitment.pojo.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="headerMask != null" >
        headerMask,
      </if>
      <if test="nickname != null" >
        nickName,
      </if>
      <if test="telephone != null" >
        telephone,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="username != null" >
        userName,
      </if>
      <if test="password != null" >
        passWord,
      </if>
      <if test="license != null" >
        license,
      </if>
      <if test="companyid != null" >
        companyId,
      </if>
      <if test="empno != null" >
        empNo,
      </if>
      <if test="cardphoto != null" >
        cardPhoto,
      </if>
      <if test="enterprisemail != null" >
        enterpriseMail,
      </if>
      <if test="authentication != null" >
        authentication,
      </if>
        createTime,
        updateTime,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="headerMask != null" >
        #{headerMask,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null" >
        #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="license != null" >
        #{license,jdbcType=VARCHAR},
      </if>
      <if test="companyid != null" >
        #{companyid,jdbcType=INTEGER},
      </if>
      <if test="empno != null" >
        #{empno,jdbcType=INTEGER},
      </if>
      <if test="cardphoto != null" >
        #{cardphoto,jdbcType=VARCHAR},
      </if>
      <if test="enterprisemail != null" >
        #{enterprisemail,jdbcType=VARCHAR},
      </if>
      <if test="authentication != null" >
        #{authentication,jdbcType=INTEGER},
      </if>
      now(),
        now(),
    </trim>
    -- keyColumn：数据库中的列，keyProperty：pojo类中的属性，order：主键值返回的顺序
    <selectKey keyColumn="id" resultType="integer" keyProperty="id" order="AFTER">
        select LAST_INSERT_ID()
    </selectKey>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zzj.recruitment.pojo.User" >
    update user
    <set >
      <if test="headerMask != null" >
        headerMask = #{headerMask,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        nickName = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null" >
        telephone = #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="username != null" >
        userName = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        passWord = #{password,jdbcType=VARCHAR},
      </if>
      <if test="license != null" >
        license = #{license,jdbcType=VARCHAR},
      </if>
      <if test="companyid != null" >
        companyId = #{companyid,jdbcType=INTEGER},
      </if>
      <if test="empno != null" >
        empNo = #{empno,jdbcType=INTEGER},
      </if>
      <if test="cardphoto != null" >
        cardPhoto = #{cardphoto,jdbcType=VARCHAR},
      </if>
      <if test="enterprisemail != null" >
        enterpriseMail = #{enterprisemail,jdbcType=VARCHAR},
      </if>
        updateTime = now(),
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zzj.recruitment.pojo.User" >
    update user
    set
      headerMask = #{headerMask,jdbcType=VARCHAR},
      nickName = #{nickname,jdbcType=VARCHAR},
      telephone = #{telephone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      userName = #{username,jdbcType=VARCHAR},
      passWord = #{password,jdbcType=VARCHAR},
      license = #{license,jdbcType=VARCHAR},
      companyId = #{companyid,jdbcType=INTEGER},
      empNo = #{empno,jdbcType=INTEGER},
      cardPhoto = #{cardphoto,jdbcType=VARCHAR},
      enterpriseMail = #{enterprisemail,jdbcType=VARCHAR},
      updateTime = now()
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="checkRepetition" parameterType="com.zzj.recruitment.pojo.User" resultType="integer">
    select id from `user`
    <where>
      <if test="type != null and type == 'nickName' ">
        and nickName = #{value}
      </if>
      <if test="type != null and type == 'userName' ">
        and userName = #{value}
      </if>
      <if test="type != null and type == 'email' ">
        and email = #{value}
      </if>
      <if test="type != null and type == 'telephone' ">
        and telephone = #{value}
      </if>
      <if test="type != null and type == 'password' ">
        and passWord = #{value}
      </if>
    </where>
  </select>

  <select id="selectByUsername" parameterType="string" resultType="com.zzj.recruitment.pojo.User">
    select
    <include refid="Base_Column_List" />
    from `user`
    <where>
      userName = #{username}
    </where>
  </select>

  <select id="getUserRolesById" parameterType="java.lang.Integer" resultType="com.zzj.recruitment.pojo.Role">
    select r.id, r.name, r.nameZh
    from role as r
    where r.id
    in (select ur.role_id from user_role as ur where ur.user_id = #{id})
  </select>

  <update id="resetPasswordByUsername">
    update user set passWord = #{passwordNew}
    where userName = #{username}
  </update>


  <insert id="saveEnterpriseUserInfo" parameterType="com.zzj.recruitment.vo.EnterpriseUserInfoVo">
    update user
    set
    companyId = #{companyId},
    empNo = #{empNo},
    cardPhoto = #{cardPhoto},
    enterpriseMail = #{enterpriseMail},
    authentication = 4,
    updateTime = now()
    where
    id  = #{userId}
  </insert>

  <select id="selectEnterpriseUserById" resultType="com.zzj.recruitment.vo.EnterpriseUserInfoVo" parameterType="integer">
    select u.id as userId, u.nickName as nickname, u.telephone as telephone,
    u.companyId as companyId, c.cname as companyName, u.empNo as empNo,
    u.cardPhoto as cardPhoto, u.enterpriseMail as enterpriseMail, u.authentication as authentication
    from `user` as u
    left join company as c on u.companyId = c.id
    where u.id = #{entUserId} and u.companyId = #{companyid}
  </select>

  <select id="selectEnterpriseUserList" resultType="com.zzj.recruitment.vo.EnterpriseUserInfoVo">
    select u.id as userId, u.nickName as nickname, u.telephone as telephone, u.empNo as empNo, u.authentication as authentication
    from `user` as u
    where u.companyId = #{companyid} and u.id <![CDATA[<>]]> #{userid}
    order by u.updateTime desc
  </select>

  <update id="updateAuthenticationByUserId">
    update `user` set authentication = #{authentication} where id = #{entUserId}
  </update>

  <select id="selectEnterpriseAccount" resultType="com.zzj.recruitment.vo.EnterpriseAccountListVo">
    select u.id as id, u.nickname as nickname, u.telephone as telephone, u.email as email,
    u.userName as username, c.cname as companyName, u.authentication as authentication
    from `user` as u
    left join company as c on u.companyId = c.id
    left join user_role as ur on u.id = ur.user_id
    <where>
      <if test="auth == 1">
        and ur.role_id = 3
      </if>
      and u.authentication = #{auth}
    </where>

  </select>

  <select id="selectUserListBySearchVo" resultType="com.zzj.recruitment.vo.UserDetailInfoVo" parameterType="com.zzj.recruitment.vo.UserSearchVo">
    select u.id, u.nickName, u.telephone, u.email, u.userName, u.companyId, c.cname as company, u.empNo, u.authentication, u.createTime
    from `user` as u
    left join company as c on u.companyId = c.id
    <where>
      <if test="id != null">
        and id = #{id}
      </if>
      <if test="nickname != null and nickname != ''">
        and upper(nickName) like upper(CONCAT('%', #{nickname}, '%'))
      </if>
      <if test="telephone != null and telephone != ''">
        and upper(telephone) like upper(CONCAT('%', #{telephone}, '%'))
      </if>
      <if test="email != null and email != ''">
        and upper(email) like upper(CONCAT('%', #{email}, '%'))
      </if>
      <if test="username != null and username != ''">
        and upper(username) like upper(CONCAT('%', #{username}, '%'))
      </if>
      <if test="empno != null">
        and empNo like concat('%', #{empno}, '%')
      </if>
      <if test="companyid != null">
        and companyId = #{companyid}
      </if>
      <if test="authentication != null">
        and authentication = #{authentication}
      </if>
      <if test="createTImeFrom != null">
        and u.createTime <![CDATA[>=]]> #{createTImeFrom}
      </if>
      <if test="createTImeTo != null">
        and u.createTime <![CDATA[<=]]> #{createTImeTo}
      </if>
    </where>
  </select>

  <select id="selectUserListByUserName" resultType="com.zzj.recruitment.vo.UserListVo">
    select id, nickName from `user` where id != #{userId} and nickName like CONCAT('%', #{userName},'%') order by id
  </select>
</mapper>